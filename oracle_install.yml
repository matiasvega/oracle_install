---
#Adding the new host dinamically to a new group using the IP provided
- hosts: localhost
  vars_files:
    - vars/main.yml
  vars:
    ip: "{{ lookup('env','ip') }}"
    dbhostname: "{{ lookup('env','dbhostname')  }}"

  tasks:

    - name: Show the IP
      debug:
        var: "{{ ip }}"

    - name: Dynamically add new host to group "new_db"
      add_host:
        name: "{{ ip }}"
        groups: new_db
        ansible_user: operador
        ansible_ssh_private_key_file: "{{ ssh_key | default(omit) }}"

#Start the installation or pre requisites
- name: Install Oracle Database 19c
  hosts: new_db
  become: true
  vars_files:
    - vars/main.yml

  pre_tasks:

    # - name: Ensure base Python packages are installed
    #   raw: sudo dnf install -y python3 python3-libselinux python3-libsemanage python3-dnf   

    - name: Ensure required OS packages are installed
      raw: dnf install -y oracle-database-preinstall-19c

    - name: Configure hosts file
      become: true
      ansible.builtin.lineinfile:
        path: /etc/hosts
        line: "{{ ip }}  {{ dbhostname }}.localdomain  {{ dbhostname }}"
        insertafter: EOF
        backup: yes
      become_user: root

    - name: Configure hostname
      become: true
      ansible.builtin.lineinfile:
        path: /etc/hostname
        line: "{{ dbhostname }}.localdomain"
        insertafter: EOF
      become_user: root


    - name: Create required directories
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ oracle_user }}"
        group: "{{ oracle_group }}"
        mode: '0755'
      loop:
        - "{{ oracle_base }}"
        - "{{ oracle_home }}"
        - "{{ oracle_inventory }}"
        - "{{ oracle_scripts }}"

# En el fichero /etc/selinux/config el parámetro «SELINUX» debe estar a disabled
# SELINUX=permissive
# setenforce Permissive
# systemctl stop firewalld
# systemctl disable firewalld



  tasks:
    # - name: Upload Oracle installer
    #   copy:
    #     src: "files/{{ oracle_zip_file }}"
    #     dest: "/tmp/{{ oracle_zip_file }}"
    #     mode: '0644'

    - name: Unzip Oracle installer
      unarchive:
        # src: "/tmp/{{ oracle_zip_file }}"
        src: "/vagrant/x/{{ oracle_zip_file }}"
        dest: "{{ oracle_home }}"
        remote_src: yes
        owner: "{{ oracle_user }}"
        group: "{{ oracle_group }}"

    - name: Set Oracle environment variables in bashrc
      blockinfile:
        path: /home/oracle/.bashrc
        block: |
          export ORACLE_BASE={{ oracle_base }}
          export ORACLE_HOME={{ oracle_home }}
          export PATH=$ORACLE_HOME/bin:$PATH
          export CV_ASSUME_DISTID=OL7
        owner: "{{ oracle_user }}"
        group: "{{ oracle_group }}"
        create: true
      become_user: oracle

    - name: Set Oracle environment variables in profile
      blockinfile:
        path: /etc/profile.d/oracle.sh
        block: |
          export ORACLE_BASE={{ oracle_base }}
          export ORACLE_HOME={{ oracle_home }}
          export PATH=$ORACLE_HOME/bin:$PATH
          export CV_ASSUME_DISTID=OL7
        owner: root
        group: root
        create: true
        mode: '0755'

    - name: Reload bashrc
      command: source /home/oracle/.bashrc
      become_user: oracle
      ignore_errors: yes # In case the user is not logged in

    - name: Reload profile
      command: ". /etc/profile.d/oracle.sh"
      become_user: root
      ignore_errors: yes

    - name: Debug env
      command: env
      register: env_result
      
    - name: show env
      debug:
        var: env_result

    - name: Run Oracle installer in silent mode
      become: yes
      become_method: sudo
      become_user: "{{ oracle_user }}"
      environment:
        ORACLE_BASE: "{{ oracle_base }}"
        ORACLE_HOME: "{{ oracle_home }}"
        LANG: en_US.UTF-8
        PATH: "{{ oracle_home }}/bin:$PATH"
        CV_ASSUME_DISTID: "OL7" 
        ORACLE_HOSTNAME: "{{ dbhostname }}.localdomain"
      command: >
        {{ oracle_home }}/runInstaller
        -ignorePrereq -waitforcompletion -silent
        -responseFile {{ oracle_home }}/install/response/db_install.rsp
        oracle.install.option=INSTALL_DB_SWONLY
        ORACLE_HOME={{ oracle_home }}
        ORACLE_BASE={{ oracle_base }}
        oracle.install.db.InstallEdition=EE
        oracle.install.db.OSDBA_GROUP=dba
        oracle.install.db.OSOPER_GROUP=oper
        oracle.install.db.OSBACKUPDBA_GROUP=backupdba
        oracle.install.db.OSDGDBA_GROUP=dgdba
        oracle.install.db.OSKMDBA_GROUP=kmdba
        oracle.install.db.OSRACDBA_GROUP=racdba
        DECLINE_SECURITY_UPDATES=true
      args:
        chdir: "{{ oracle_home }}"
      register: install_result
      ignore_errors: true

    - name: Run root scripts after installation
      command: "{{ item }}"
      with_items:
        - "{{ oracle_inventory }}/orainstRoot.sh"
        - "{{ oracle_home }}/root.sh"
      when: install_result.rc == 0


    - name: Create listener using NETCA
      become_user: "{{ oracle_user }}"
      command: >
        {{ oracle_home }}/bin/netca -silent -responsefile {{ oracle_home }}/install/response/netca.rsp
      args:
        chdir: "{{ oracle_home }}"
      register: netca_result

    - name: Ensure listener.ora exists
      stat:
        path: "{{ oracle_home }}/network/admin/listener.ora"
      register: listener_ora_file

    - name: Backup and update listener.ora (if needed)
      block:
        - name: Backup listener.ora
          copy:
            src: "{{ oracle_home }}/network/admin/listener.ora"
            dest: "{{ oracle_home }}/network/admin/listener.ora.bak"
            remote_src: yes

        - name: Overwrite listener.ora
          copy:
            dest: "{{ oracle_home }}/network/admin/listener.ora"
            content: |
              LISTENER =
                (DESCRIPTION_LIST =
                  (DESCRIPTION =
                    (ADDRESS = (PROTOCOL = TCP)(HOST = {{ ansible_hostname }})(PORT = {{ listener_port }}))
                  )
                )

              SID_LIST_LISTENER =
                (SID_LIST =
                  (SID_DESC =
                    (SID_NAME = {{ db_sid }})
                    (ORACLE_HOME = {{ oracle_home }})
                    (PROGRAM = extproc)
                  )
                )
            owner: "{{ oracle_user }}"
            group: "{{ oracle_group }}"
            mode: '0644'
      when: listener_ora_file.stat.exists

    - name: Start Oracle Listener
      become_user: "{{ oracle_user }}"
      command: "{{ oracle_home }}/bin/lsnrctl start {{ listener_name }}"
      register: lsnrctl_result
      ignore_errors: true

    - name: Create Oracle Database using DBCA
      become_user: "{{ oracle_user }}"
      command: >
        {{ oracle_home }}/bin/dbca -silent
        -createDatabase
        -templateName General_Purpose.dbc
        -gdbname {{ db_name }}
        -sid {{ db_sid }}
        -responseFile NO_VALUE
        -characterSet {{ db_character_set }}
        -createAsContainerDatabase true
        -numberOfPDBs 1
        -pdbName {{ pdb_name }}
        -createListener {{ listener_name }},port={{ listener_port }}
        -datafileDestination '{{ oracle_base }}/oradata'
        -emConfiguration NONE
        -sysPassword {{ db_password }}
        -systemPassword {{ db_password }}
        -pdbAdminPassword {{ db_password }}
        -databaseType MULTIPURPOSE
        -automaticMemoryManagement false
        -totalMemory 2048
      register: dbca_result
      args:
        chdir: "{{ oracle_home }}"
      when: install_result.rc == 0

    - name: Show DBCA output
      debug:
        var: dbca_result.stdout_lines